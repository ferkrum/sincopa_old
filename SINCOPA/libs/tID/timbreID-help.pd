#N canvas 175 76 1037 713 10;
#X obj 64 454 s tr;
#X obj 64 431 spigot;
#X obj 113 431 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X text 130 430 train;
#X obj 632 265 r tr;
#X obj 669 265 r id;
#X obj 588 265 r tID;
#X obj 192 450 s id;
#X obj 192 431 spigot;
#X obj 241 431 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 1
1;
#X text 256 431 id;
#X obj 308 308 nbx 3 28 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 28
-262144 -1 -1 56 256;
#X obj 117 -109 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1
1 1;
#X msg 78 -155 open testing.wav;
#X msg 62 -174 open training.wav;
#X obj 292 194 s tID;
#X text 95 238 See bfcc~ helpfile.;
#X obj 54 -98 readsf~;
#X obj 158 21 dac~;
#N canvas 497 47 624 342 onset 0;
#X obj 74 25 bonk~;
#X obj 74 46 t b;
#X floatatom 141 135 5 0 0 0 - - -;
#X obj 102 -19 loadbang;
#X obj 74 112 spigot 1;
#X msg 127 88 0;
#X msg 95 88 1;
#X obj 74 133 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X text 159 89 To avoid double attacks.;
#X text 118 26 Use bonk~ to detect attacks.;
#X msg 102 1 minvel 20;
#X obj 74 -57 inlet~;
#X obj 74 217 outlet;
#X obj 95 68 del 200;
#X obj 74 153 del 11.6;
#X text 152 150 Delay the bang to bfcc~ by 1/2 the analysis period
to fill the window with a good portion of immediately post-onset sound.
;
#X connect 0 0 1 0;
#X connect 1 0 4 0;
#X connect 2 0 14 1;
#X connect 3 0 10 0;
#X connect 4 0 5 0;
#X connect 4 0 7 0;
#X connect 4 0 13 0;
#X connect 5 0 4 1;
#X connect 6 0 4 1;
#X connect 7 0 14 0;
#X connect 10 0 0 0;
#X connect 11 0 0 0;
#X connect 13 0 6 0;
#X connect 14 0 12 0;
#X restore 98 76 pd onset;
#X text 109 58 Detect onsets with bonk~;
#X floatatom 592 474 10 0 0 0 - - -;
#X floatatom 711 432 10 0 0 0 - - -;
#X text 592 490 Second outlet reports the \; distance to the nearest
\; match.;
#X obj 16 -63 adc~;
#X obj 16 -42 *~;
#X obj 43 -42 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X msg 369 95 uncluster;
#X text 137 -123 Test with the given training/testing \; recordings
or try direct microphone \; input via adc~. Turn on the "train" \;
or "id" spigots below to get started.;
#X obj 64 258 bfcc~ 1024 0.5;
#X text 351 32 Perform hierarchical clustering to find a given number
of clusters (i.e. instruments). See arcane_parameters subpatch above
for manual clustering.;
#X text 442 94 Go back to reporting raw instance indexes.;
#X text 735 295 Fourth outlet outputs results of \; timbre ordering
requests. See the \; arcane_parameters subpatch above \; for details.
;
#X msg 401 159 clear;
#X msg 390 128 forget;
#X obj 308 341 print timbre;
#N canvas 729 80 551 704 long-winded-introduction 1;
#X text 56 90 This help patch provides a basic example of how to classify
percussive sounds. After sending 5-10 training examples per instrument
\, try using the "cluster" message to group them into as many clusters
as you have instruments. Then timbreID will output cluster indexes
in response to ID requests.;
#X text 56 180 BFCCs are used at left \, but any feature vector can
go into timbreID. BFCCs seem to work best in general. Swap bfcc~ for
mfcc~ \, cepstrum~ \, or full magnitude spectrum (magSpec~) to experiment
with your particular sound set. Analyses that capture changes over
time are significantly more effective. Check out an example of this
as well as other feature externs in the two abstractions that are also
in this folder: features_abstraction.pd and temporal_evolution_abstraction.pd.
;
#X text 56 310 Apart from cepstrum-based externals \, other available
features in the timbreID set are magSpec~ \, barkSpec~ \, specBrightness~
\, specCentroid~ \, specFlatness~ \, specFlux~ \, specRolloff~ \, and
zeroCrossing~. Each of these have help files that explain the kind
of measurement they're producing.;
#X text 56 400 The goal is to create a flexible set of analysis tools
that encourage and facilitate signal analysis and classification. Many
of the cumbersome details that accompany real time analysis in Pd have
been taken care of for you. Blocking \, overlapping \, and windowing
have all been streamlined as much as possible.;
#X text 56 -100 timbreID stores \, clusters \, and classifies feature
vectors. Features sent to the first inlet are used for training. Features
sent to the second inlet are used for identification \, and produce
a nearest match report from the first outlet. The third inlet also
takes features intended for identification \, but the identification
process is specifically designed for concatenative synthesis. See the
granular patch in the accompanying examples package for how to do concatenative
synthesis using this set of externals. timbreID can also order the
timbres you train it with when it receives the "order" message. This
could be used in real-time for a performance \, or for non-real-time
research and composition. See the timbre-ordering example in the examples
package for more information.;
#X text 56 490 Because there is a lot of flexibility \, there are also
a lot of features and messages to cover in this helpfile. But you can
get the gist of the system very quickly by trying the percussion classification
demo in the main patch at left. Check the "train" toggle at the lower
left and play "training.wav" at the top left to train the system. (And
make sure DSP is turned on first...);
#X restore 551 -119 pd long-winded-introduction;
#X text 549 -137 Open this subpatch for a description of the object.
;
#X text 792 387 The third outlet reports a \; questionable confidence
\; measure between 0 and 1.0. \; This is more meaningful when \; clusters
are specified \, and \; when the KNN search size is \; greater than
the number of \; training examples given per \; instrument.;
#X obj 551 -76 cnv 15 380 50 empty empty empty 20 12 0 14 -228856 -66577
0;
#N canvas 196 43 1051 735 arcane_parameters 0;
#X obj 576 562 s tID;
#X msg 32 89 dist_metric \$1;
#X text 31 457 Specify a list of weights. Suppose you have a feature
vector composed of spectral centroid and spectral flux \, and want
the latter feature to have half as much impact as the former during
distance calculation. This is the way to play with the balance.;
#X floatatom 32 381 5 0 0 0 - - -;
#X obj 32 417 s tID;
#X obj 32 546 s tID;
#X obj 576 506 s tID;
#X obj 576 435 s tID;
#X obj 32 110 s tID;
#X msg 576 416 variance;
#X msg 32 526 weights 1 0.5;
#N canvas 310 76 986 607 timbreOrder 0;
#N canvas 0 22 450 300 (subpatch) 0;
#X array timbreOrder 72 float 2;
#X coords 0 59 72 0 200 140 1;
#X restore 759 296 graph;
#X obj 30 72 soundfiler;
#X msg 30 48 read -resize training.wav timbreID-sample;
#N canvas 0 22 450 300 (subpatch) 0;
#X array timbreID-attacks 60 float 2;
#X coords 0 1.4553e+06 60 0 200 140 1;
#X restore 759 128 graph;
#X obj 519 440 tabplay~ timbreID-sample;
#X obj 519 501 dac~;
#X msg 519 419 \$1 19757;
#X obj 519 398 tabread timbreID-attacks;
#X obj 519 376 tabread timbreOrder;
#X obj 501 334 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 519 334 f 0;
#X obj 548 334 + 1;
#X obj 519 355 % 60;
#X obj 519 270 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X msg 579 264 448;
#X msg 611 264 224;
#X msg 644 264 112;
#X obj 519 290 metro 112;
#X text 417 332 Manual step;
#X msg 30 229 order \$1;
#X floatatom 30 212 5 0 0 0 - - -;
#X obj 30 250 s tID;
#X msg 677 264 56;
#X msg 537 312 0;
#X obj 759 86 table timbreID-sample;
#X text 576 245 Inter-onset time;
#X floatatom 470 371 5 0 0 0 - - -;
#X text 557 470 Sorry \, no envelope to make the transitions pretty...
;
#X text 423 250 Auto-play through \; timbre order;
#X msg 30 414 clusters_list;
#X obj 30 575 s tID;
#X floatatom 57 505 5 0 0 0 - - -;
#X msg 57 524 cluster_list \$1;
#X text 38 441 If you have clustered your instances \, send the list
out of the fourth outlet with the clusters_list message. Or \, use
cluster_list <cluster no.> to send out the list of only one specific
cluster.;
#X text 399 25 ** See the timbre-ordering.pd example in the examples
package for more detailed information about timbre orderings \, including
how to weight multi-feature lists **;
#X text 29 29 1) Load the training sample to a table:;
#N canvas 93 159 471 379 load-attacks 0;
#X obj 30 187 list split 1;
#X obj 30 335 tabwrite timbreID-attacks;
#X obj 202 308 f 0;
#X obj 234 308 + 1;
#X msg 220 286 0;
#X obj 45 214 list;
#X msg 30 63 0.139 0.726 1.324 1.926 2.514 3.433 3.991 4.54 5.078 5.619
6.556 7.037 7.554 8.065 8.573 9.14 9.629 10.148 10.655 11.148 12.285
12.819 13.324 13.816 14.334 14.901 15.402 15.9 16.41 16.926 17.723
18.252 18.771 19.278 19.776 20.496 20.993 21.488 21.983 22.483 23.316
23.804 24.297 24.789 25.263 25.872 26.349 26.833 27.327 27.823 28.479
28.96 29.438 29.911 30.397 31.135 31.607 32.079 32.527 32.996 \;;
#X obj 30 293 * 44100;
#X obj 30 313 int;
#X obj 30 238 t b l b;
#X obj 30 274 list trim;
#X obj 30 156 t l b;
#X obj 30 32 inlet;
#X connect 0 0 9 0;
#X connect 0 1 5 1;
#X connect 2 0 3 0;
#X connect 2 0 1 1;
#X connect 3 0 2 1;
#X connect 4 0 2 1;
#X connect 5 0 0 0;
#X connect 6 0 11 0;
#X connect 7 0 8 0;
#X connect 8 0 1 0;
#X connect 9 0 5 0;
#X connect 9 1 10 0;
#X connect 9 2 2 0;
#X connect 10 0 7 0;
#X connect 11 0 0 0;
#X connect 11 1 4 0;
#X connect 12 0 6 0;
#X restore 30 155 pd load-attacks;
#X obj 30 133 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X text 31 113 2) Load a list of attack times in seconds:;
#X text 30 191 3) Try an order starting from a particular instrument:
;
#X obj 586 339 r ordering-length;
#X connect 2 0 1 0;
#X connect 4 0 5 0;
#X connect 4 0 5 1;
#X connect 6 0 4 0;
#X connect 7 0 6 0;
#X connect 8 0 7 0;
#X connect 9 0 10 0;
#X connect 10 0 11 0;
#X connect 10 0 12 0;
#X connect 11 0 10 1;
#X connect 12 0 8 0;
#X connect 12 0 26 0;
#X connect 13 0 17 0;
#X connect 14 0 17 1;
#X connect 15 0 17 1;
#X connect 16 0 17 1;
#X connect 17 0 10 0;
#X connect 19 0 21 0;
#X connect 20 0 19 0;
#X connect 22 0 17 1;
#X connect 23 0 10 1;
#X connect 29 0 30 0;
#X connect 31 0 32 0;
#X connect 32 0 30 0;
#X connect 37 0 36 0;
#X connect 40 0 12 1;
#X restore 32 173 pd timbreOrder;
#X obj 32 290 s tID;
#X obj 578 44 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X msg 578 64 normalize \$1;
#X obj 578 85 s tID;
#X text 82 252 This is only relevant if clustering has been performed.
Change the number of nearest neighbors searched in the KNN algorithm
(default is 3). If knn is set to a value slightly higher than the number
of training examples you give per instrument \, the confidence measure
reported from timbreID's 3rd outlet will be much more meaningful.;
#X text 575 115 Normalize all feature attributes to the 0-1 range.
If the range of some attributes is much larger than others \, they
will have more of an influence on the distance calculation \, which
may skew things in an undesireable way. Normalization evens the playing
field. BUT - it also means that noisy attributes with a small magnitude
(like the highest MFCCs) might have undue influence. In the case of
mixing spectral centroid and zero crossing rate into a single feature
\, however \, normalization is almost certainly the way to go. Note:
if you have thousands rather than hundreds of instances \, this calculation
will take several seconds. This is something to be performed before
any real time classification is going on.;
#X obj 32 59 hradio 15 1 0 3 empty empty empty 0 -8 0 10 -262144 -1
-1 0;
#N canvas 237 58 975 603 more 0;
#X obj 200 460 s tID;
#X msg 200 440 manual_cluster 12 0 0 4;
#X obj 101 156 s tID;
#X msg 141 106 read_clusters_text cluster.txt;
#X msg 101 36 write_clusters cluster.clu;
#X msg 111 56 read_clusters cluster.clu;
#X msg 131 86 write_clusters_text cluster.txt;
#X text 387 507 Also note that timbreID does not check to see if you
actually end up defining 12 clusters if you've sent a few messages
indicating that there will be 12 clusters. Crashes are entirely possible
if you don't keep track of this properly.;
#X msg -96 232 clusters_list;
#X obj -96 423 s tID;
#X floatatom -69 353 5 0 0 0 - - -;
#X msg -69 372 cluster_list \$1;
#X text -88 259 If you have clustered your instances \, send the list
out of the fourth outlet with the clusters_list message. Or \, use
cluster_list <cluster no.> to send out the list of only one specific
cluster. (Notice the difference of singular vs. plural - clusters_list
vs. cluster_list).;
#X text 385 34 For small training datasets like the one in this help
patch \, clustering is basically instantaneous. But if you start working
with large sets (1000s of instances) like those in the timbre-order
patches from the timbreID example package \, it can take several seconds
or even minutes. In those cases \, it's good to have a way to save
the cluster information you just computed. The fastest way to read/write
the data is with the "read_clusters" & "write_clusters" messages.;
#X text 385 154 The text format that results from "write_clusters_text"
takes a bit more time to generate \, but could be useful in certain
situations. For instance \, even with small datasets \, you might want
to cluster data in an unusual way \, or maybe the automatic clustering
algorithm just didn't work the way you wanted it to. With these messages
you can load cluster information that you write yourself in a text
file. To see the appropriate format \, save cluster info from this
help patch and open up the resulting text file. It couldn't be much
simpler - it just shows the number of clusters on the first line \,
then each following line contains the index of instances that should
be clustered together. Terminate each line with a semicolon.;
#X text 388 360 Another alternative to auto-clustering is "manual_cluster"
\, which might be useful if you have to cluster things in the middle
of a performance and want to be able to do it entirely within Pd. Send
this message for each cluster you want to create. Argument list is
<total number of clusters> <this cluster index> <lower instance index>
<upper instance index>. Indexing is always starting from 0 Notice that
you can't cluster non-neighboring instances at present. I'll get around
to it if anyone actually has a need for it \, but for now you'll have
to read in off of a text file if you want non-neighboring instances
clustered together.;
#X connect 1 0 0 0;
#X connect 3 0 2 0;
#X connect 4 0 2 0;
#X connect 5 0 2 0;
#X connect 6 0 2 0;
#X connect 8 0 9 0;
#X connect 10 0 11 0;
#X connect 11 0 9 0;
#X restore 32 202 pd more on clustering;
#X text 190 202 <--how to save cluster information.;
#X text 139 173 <--a small example of how to order sounds by timbre.
;
#X obj 32 705 s tID;
#X msg 32 685 feature_list \$1;
#X floatatom 32 666 5 0 0 0 - - -;
#X text 30 607 Request a specific instance's full feature list. It
will be spit out timbreID's fifth outlet. This can be used to plot
instances by any of their feature attributes. See the timbre-space
example in the examples package.;
#X msg 32 397 print_instance \$1 0 4;
#X text 76 353 Print a range of attributes from a particular instance.
Specify the instance index \, lower attribute \, and upper attribute
that you wish to print.;
#X msg 576 667 max_values;
#X obj 576 698 s tID;
#X msg 662 667 min_values;
#X text 575 629 Spit out a list of the max or min values for all attributes
in your feature database.;
#X text 573 312 Reorder attributes by variance \, so that only the
most relevant attributes can be used to calculate the distance measure.
For instance \, after ordering a 47-component BFCC vector by variance
\, you may only want to compare the first 10 attributes \, since those
will be the ones with the most variance. Specify this range using the
"attribute_range" message. Like "normalize" \, this is not an operation
to try during real time performance.;
#X msg 576 487 order_attributes;
#X text 706 486 Go back to regular attribute order.;
#X msg 576 542 attribute_range 0 9;
#X text 624 561 Specify a restricted range of attributes to use in
the distance calculation.;
#X msg 32 270 knn 7;
#X text 150 64 Choose a distance metric. \; 0 is Euclidean (default)
\; 1 is Manhattan distance. \; 2 is Pearson Correlation Coefficient
\;;
#X connect 1 0 8 0;
#X connect 3 0 26 0;
#X connect 9 0 7 0;
#X connect 10 0 5 0;
#X connect 13 0 14 0;
#X connect 14 0 15 0;
#X connect 18 0 1 0;
#X connect 23 0 22 0;
#X connect 24 0 23 0;
#X connect 26 0 4 0;
#X connect 28 0 29 0;
#X connect 30 0 29 0;
#X connect 33 0 6 0;
#X connect 35 0 0 0;
#X connect 37 0 12 0;
#X restore 769 -62 pd arcane_parameters;
#X text 565 -61 Many more details inside -->;
#N canvas 253 32 524 631 file-formats 0;
#X obj 49 452 s tID;
#X text 48 328 Write an ARFF file for direct importation into WEKA
(www.cs.waikato.ac.nz/ml/weka). Arguments are file name \, relation
name \, then triples composed of <float> <float> <symbol> to label
ranges of the feature. The message below is an example.;
#X text 48 507 Write a MATLAB/octave matrix file \, that can be loaded
into either program with the command load -ascii 'filename';
#X obj 49 582 s tID;
#X obj 49 277 s tID;
#X obj 49 122 s tID;
#X msg 49 67 write feature-db.timid;
#X msg 79 92 read feature-db.timid;
#X msg 49 222 write_text feature-db.txt;
#X msg 79 247 read_text feature-db.txt;
#X text 48 177 If you need to read the feature values for some debugging
reason \, you might want to export in the text file format using the
write_text method.;
#X text 48 8 timbreID's default binary file format is .timid. This
will write and read much faster than the text format \, so it's the
best choice for large databases (i.e. 1000s of instances);
#X msg 48 397 ARFF arff-db.arff relation-name 0 9 feature1-name 10
46 feature2-name;
#X msg 49 541 MATLAB matlab-db.mat variableName;
#X connect 6 0 5 0;
#X connect 7 0 5 0;
#X connect 8 0 4 0;
#X connect 9 0 4 0;
#X connect 12 0 0 0;
#X connect 13 0 3 0;
#X restore 840 -7 pd file-formats;
#N canvas 881 463 385 210 timbre-order 0;
#X obj 30 40 inlet;
#X obj 31 169 s timbreOrder;
#X obj 31 150 list prepend 0;
#X obj 180 94 list length;
#X msg 180 155 \; timbreOrder resize \$1;
#X obj 31 78 t a a;
#X obj 180 115 t f f;
#X obj 212 135 s ordering-length;
#X connect 0 0 5 0;
#X connect 2 0 1 0;
#X connect 3 0 6 0;
#X connect 5 0 2 0;
#X connect 5 1 3 0;
#X connect 6 0 4 0;
#X connect 6 1 7 0;
#X restore 738 350 pd timbre-order;
#X obj 632 292 timbreID;
#X obj 789 232 list split 5;
#X obj 789 253 print BFCCs_0_thru_4;
#X msg 333 8 read feature-db.timid;
#X msg 322 -17 write feature-db.timid;
#X text 494 -6 Read & write feature database (binary format).;
#X text 444 122 Forget the last instance. Send this multiple times
to erase multiple instances.;
#X text 445 158 Wipe all instances to start over.;
#X text 785 185 Fifth outlet outputs a specific \; instance's feature
per the \; "feature_list" message.;
#X text 408 317 First outlet reports the \; index of the nearest \;
match instance \, or \, if \; clustering has been \; performed \, the
index of \; its associated cluster.;
#X text 408 397 During training \, the first \; outlet reports the
number \; of training instance that \; have been received.;
#X msg 354 75 cluster 12;
#X obj 160 -21 *~ 0.5;
#X msg 201 -150 start;
#X connect 1 0 0 0;
#X connect 2 0 1 1;
#X connect 4 0 44 0;
#X connect 5 0 44 1;
#X connect 6 0 44 0;
#X connect 8 0 7 0;
#X connect 9 0 8 1;
#X connect 11 0 35 0;
#X connect 12 0 17 0;
#X connect 13 0 17 0;
#X connect 14 0 17 0;
#X connect 17 0 19 0;
#X connect 17 0 29 0;
#X connect 17 0 56 0;
#X connect 17 1 12 0;
#X connect 19 0 29 0;
#X connect 24 0 25 0;
#X connect 25 0 19 0;
#X connect 25 0 29 0;
#X connect 26 0 25 1;
#X connect 27 0 15 0;
#X connect 29 0 8 0;
#X connect 29 0 1 0;
#X connect 33 0 15 0;
#X connect 34 0 15 0;
#X connect 44 0 11 0;
#X connect 44 1 21 0;
#X connect 44 2 22 0;
#X connect 44 3 43 0;
#X connect 44 4 45 0;
#X connect 45 0 46 0;
#X connect 47 0 15 0;
#X connect 48 0 15 0;
#X connect 55 0 15 0;
#X connect 56 0 18 0;
#X connect 56 0 18 1;
#X connect 57 0 17 0;
